#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
require 'methadone'
require 'objc_2_swift'
require 'swift_tools'

module SwiftTools
  class Tool
    include Methadone::Main
    include Methadone::CLILogging

    main do |h_filename, m_filename|
      unless File.extname(h_filename) == '.h'
        exit_now! 127, "Header file must end in .h"
      end

      unless File.exist?(h_filename)
        exit_now! 127, "File '#{h_filename}' does not exist"
      end

      unless m_filename.nil?
        unless File.extname(m_filename) == '.m'
          exit_now! 127, "Implementation file must end in .m"
        end

        unless File.exists?(m_filename)
          exit_now! 127, "File '#{m_filename}' does not exist"
        end
      end

      h_file = File.new(h_filename, "r")
      m_file = m_filename.nil? ? nil : File.new(m_filename, "r")
      swift_filename = options[:o]

      if swift_filename.nil?
        swift_file = STDOUT
        swift_filename = "STDOUT"
      else
        swift_file = File.new(swift_filename, 'w+')
      end

      tool = ObjC2Swift.new
      tool.execute(h_file, m_file, swift_file, options)

      info "\"#{h_filename}\"" + (m_filename.nil? ? '' : " + \"#{m_filename}\"") + " -> \"#{swift_filename}\""
   end

    version SwiftTools::VERSION
    description %Q(This tool does a rough conversion of Objective-C source code to Swift.  The goal of the tool
is to do most of the stuff that simply requires a lot of typing effort, and allow you
to concentrate on the more difficult aspects of the conversion, such as library and
framework usage, use of let vs. var, etc.
)
    arg :h_file, :required
    arg :m_file
    on("-o", "--output-file SWIFT_FILENAME", "The Swift output file.")

    go!
  end
end
